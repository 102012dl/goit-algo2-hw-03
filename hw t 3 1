HW T 3 1 

  Завдання 1. Застосування алгоритму максимального потоку для логістики товарів 

import networkx as nx
import pandas as pd

# Створення графа відповідно до заданих умов
G = nx.DiGraph()

edges = [
    ("Термінал 1", "Склад 1", 25), ("Термінал 1", "Склад 2", 20), ("Термінал 1", "Склад 3", 15),
    ("Термінал 2", "Склад 3", 15), ("Термінал 2", "Склад 4", 30), ("Термінал 2", "Склад 2", 10),
    ("Склад 1", "Магазин 1", 15), ("Склад 1", "Магазин 2", 10), ("Склад 1", "Магазин 3", 20),
    ("Склад 2", "Магазин 4", 15), ("Склад 2", "Магазин 5", 10), ("Склад 2", "Магазин 6", 25),
    ("Склад 3", "Магазин 7", 20), ("Склад 3", "Магазин 8", 15), ("Склад 3", "Магазин 9", 10),
    ("Склад 4", "Магазин 10", 20), ("Склад 4", "Магазин 11", 10), ("Склад 4", "Магазин 12", 15),
    ("Склад 4", "Магазин 13", 5), ("Склад 4", "Магазин 14", 10)
]

for from_node, to_node, capacity in edges:
    G.add_edge(from_node, to_node, capacity=capacity)

# Додаємо загальний початок і кінець графа
G.add_node('Джерело')
G.add_node('Сток')

for terminal in ["Термінал 1", "Термінал 2"]:
    G.add_edge('Джерело', terminal, capacity=float('inf'))

for i in range(1, 15):
    G.add_edge(f"Магазин {i}", 'Сток', capacity=float('inf'))

# Виконання алгоритму Едмондса-Карпа
flow_value, flow_dict = nx.maximum_flow(G, 'Джерело', 'Сток', flow_func=nx.algorithms.flow.edmonds_karp)

# Формування результатів для таблиці
results = []
for terminal in ["Термінал 1", "Термінал 2"]:
    for sklad in flow_dict[terminal]:
        for shop in flow_dict[sklad]:
            flow = flow_dict[sklad][shop]
            if flow > 0:
                results.append({"Термінал": terminal, "Магазин": shop, "Фактичний Потік": flow})

results_df = pd.DataFrame(results).sort_values(by=["Термінал", "Магазин"])
print("Таблиця фактичних потоків між терміналами і магазинами:")
print(results_df.to_string(index=False))

# Аналіз
# 1. Які термінали забезпечують найбільший потік
terminal_flow = results_df.groupby("Термінал")['Фактичний Потік'].sum()
print("\nЗагальний потік з терміналів:")
print(terminal_flow.to_string())

# 2. Вузькі місця (найменша пропускна здатність, використана повністю)
bottlenecks = []
for u, v, capacity in edges:
    if flow_dict[u][v] == capacity:
        bottlenecks.append((u, v, capacity))

print("\nВузькі місця (повністю використана пропускна здатність):")
for u, v, cap in bottlenecks:
    print(f"{u} -> {v}, Потік = {cap}")

# 3. Магазини, які отримали найменше товарів
shop_flows = results_df.groupby("Магазин")['Фактичний Потік'].sum().sort_values()
print("\nМагазини з найменшими потоками:")
print(shop_flows.head().to_string())

# Загальний максимальний потік
print(f"\nЗагальний максимальний потік: {flow_value}")






Таблиця фактичних потоків між терміналами і магазинами:
  Термінал    Магазин  Фактичний Потік
Термінал 1  Магазин 1               15
Термінал 1  Магазин 2               10
Термінал 1  Магазин 4               15
Термінал 1  Магазин 5               10
Термінал 1  Магазин 6                5
Термінал 1  Магазин 7               20
Термінал 1  Магазин 8               10
Термінал 2 Магазин 10               20
Термінал 2 Магазин 11               10
Термінал 2  Магазин 4               15
Термінал 2  Магазин 5               10
Термінал 2  Магазин 6                5
Термінал 2  Магазин 7               20
Термінал 2  Магазин 8               10

Загальний потік з терміналів:
Термінал
Термінал 1    85
Термінал 2    90

Вузькі місця (повністю використана пропускна здатність):
Термінал 1 -> Склад 1, Потік = 25
Термінал 1 -> Склад 2, Потік = 20
Термінал 1 -> Склад 3, Потік = 15
Термінал 2 -> Склад 3, Потік = 15
Термінал 2 -> Склад 4, Потік = 30
Термінал 2 -> Склад 2, Потік = 10
Склад 1 -> Магазин 1, Потік = 15
Склад 1 -> Магазин 2, Потік = 10
Склад 2 -> Магазин 4, Потік = 15
Склад 2 -> Магазин 5, Потік = 10
Склад 3 -> Магазин 7, Потік = 20
Склад 4 -> Магазин 10, Потік = 20
Склад 4 -> Магазин 11, Потік = 10

Магазини з найменшими потоками:
Магазин
Магазин 2     10
Магазин 11    10
Магазин 6     10
Магазин 1     15
Магазин 10    20

Загальний максимальний потік: 115
